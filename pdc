#!/usr/bin/env python3

import socket
import sys
import re
from enum import Enum

PORT = 5000

class Cmd(Enum):
    ADD     = 0
    LIST    = 1
    REMOVE  = 2
    PID     = 3
    INDEX   = 4
    CAT     = 5
    COMMAND = 6
    STATUS  = 7
    KILL    = 8

def send(msg):
    '''Sends a string as-is to the server'''
    host = socket.gethostname()
    client_socket = socket.socket()
    client_socket.connect((host, PORT))
    client_socket.send(str(msg).encode())
    data = client_socket.recv(1024).decode()
    if len(data) != 0:
        print(re.sub(r'\\n', '\n', data))
    client_socket.close()

def convert(msg):
    '''Converts raw user input into precise information for the server'''

    if msg[0] in ('ls', 'list'):
        cmd = Cmd.LIST
        if len(msg) > 1:
            print(f'\'{msg[0]}\' does not take parameters, ignoring...')
        send(cmd)

    elif msg[0] in ('rm', 'remove'):
        cmd = Cmd.REMOVE

    elif msg[0] in ('pidof', 'pid'):
        cmd = Cmd.PID
        send(cmd)

    elif msg[0] in ('index'):
        cmd = Cmd.INDEX

    elif msg[0] in ('cmd', 'command'):
        cmd = Cmd.COMMAND

    elif msg[0] in ('cat', 'get'):
        cmd = Cmd.CAT

    elif msg[0] in ('stat', 'status'):
        cmd = Cmd.STATUS

    elif cmd[0] in ('kill'):
        cmd = Cmd.KILL
        if len(msg) > 1:
            print(f'\'{msg[0]}\' does not take parameters, ignoring...')
        send(cmd)

    else:
        cmd = Cmd.ADD


    return msg

if __name__ == '__main__':
    if len(sys.argv) == 1:
        send('ls')
    elif sys.argv[1] in ('--help', '-h'):
        print('''PDC(1)

NAME
        pdc - polydown client

SYNOPSIS
        pdc [OPTIONS] [ACTION] [VALUE] [-- COMMAND]

DESCRIPTION
        PDC is a command-line client for the Polydown server (polydown).
        It connects to the server and sends messages to control its actions.

        Polydown is a great tool for setting up quick timers, alarms,
        executing commands at the end of countdowns, setting up counters...

OPTIONS
        -p <PORT>, --port <PORT>
        The port the server is listening on, default is 5000.

        -h, --help
        Print this help page.

        -f <FILE>, --file <FILE>
        Run pdc for every line in file, using each line as parameters.

ACTIONS
        add <VALUE>
            The default action. You can omit "add" for the same effect.
            Appends a time object to Polybar.  The added object should
            be immediately displayed on the bar.
            RETURNS: the object index, process PID

        rm <INDEX>..., rm #<NAME>...
            Destroys a time object and removes it from the bar.
            Works with any number of space-separated indices/names.

            Passing an asterisk * instead of an index destroys all objects.

            NAMES only apply to counter objects.

        ls, list
            Lists all running time objects in the following format:
                INDEX   PID         ACTION          COMMAND
            e.g.
                0       1422293     3m              echo 'times up!'
                1       1422295     12:33           
                3       1512210     Jan 14 14:35    systemctl poweroff

            If no time objects are present, nothing is returned.
            This is the default action, you can write just "pdc" to list.

        pidof <INDEX>..., pid <INDEX>...
            For each passed index prints its object's PID in a new line.

        index <PID>...
            For each passed PID prints its object's index in a new line.

        cmd <INDEX>..., command <INDEX>...
            For each index prints its object's command in a new line.
            Only affects timers and alarms whose commands were set.

        cat <INDEX>...
            For each index prints its object's current status:
                * timers:      remaining time
                * alarms:      remaining time
                * stopwatches: elapsed time
                * counters:    current value

        stat <INDEX>..., status <INDEX>...
            For each index prints everything known about its object. Includes:
                * always:      type, index, PID
                * timers:      remaining time, command (if set)
                * alarms:      remaining time, command (if set)
                * stopwatches: elapsed time
                * counters:    current value
            
        kill
            Kills the Polydown server. This is exactly the same as calling
            "polydown -k" or "polydown --kill".
            All running time objects will be safely preserved and resumed
            upon restarting the server again.


TIME OBJECTS AND VALUES

------- TIMER - counts down for a specified amount of time.

        Syntax:
            pdc [parameter1] [parameter2] ... [-- COMMAND]
            Where all parameters must be numbers followed by a time unit.
            The timer will be set to the sum of all parameters.
            Optionally, you can include a COMMAND string which will be
            executed once the timer hits 0.

        Examples:
            pdc 5           - set to 5 seconds (default unit)
            pdc 1h 2m 3s    - set to 1 hour, 2 minutes and 3 seconds
            pdc 2m 1d 5s    - set to 1 day, 2 minutes and 5 seconds
            pdc 2h 1h 4 4   - set to 3 hours and 8 seconds


------- ALARM - works like a timer, but it counts down towards
        a specific point in time rather than freely.

        Syntax:
        1)  pdc [dd.mm.yyyy] [HH:MM:SS] [PM/AM] [-- COMMAND]
        2)  pdc [mm/dd/yyyy] [HH:MM:SS] [PM/AM] [-- COMMAND]
            Years and seconds may also be omitted.
            If [PM/AM] is omitted, 24 hour time is inferred.
            In 12 hour time minutes are optional.
        3)  pdc +[parameter1] [parametr2] ... [-- COMMAND]
            Same rules as timer, but with a single preceding + sign.

        Examples:
            pdc 5pm                  - set to 5pm, current day
            pdc 17:00                - same time as above
            pdc 25.06 13:15          - set to Jun 25th, 13:15
            pdc 23/12/2055 7:30:15am - set to Dec 23rd 2055, 7:30:15AM
            pdc +10m                 - set to 10 minutes from now

            The difference between "pdc 10m" and "pdc +10m" is:
            If you shut down your computer and rebooted after 5 minutes,
            a timer would still be at 10 minutes, but an alarm would
            already be at 5, because it looks at the system clock.


------- STOPWATCH - measures time like a stopwatch

        Syntax:
            pdc s [START]
            If no START is given, 0 is inferred.
            START has the same syntax as timers and alarms 3).

        Examples:
            pdc s       - starts from 0
            pdc s 100   - starts from 100 seconds
            pdc s 1h 3m - starts from 1 hour and 3 minutes


------- COUNTER - stores a number and lets you change it at will

        Syntax:
            pdc #<NAME> [OPERATOR][VALUE]
            NAME must be alphanumeric (a-z, A-Z, 0-9)
            OPERATOR must be one of: +, -, *, /, //, ^, %
            VALUE must be a real number (natural for % !!!).

        Examples:
            pdc #L           - if non-existent, create #L and set to 0
            pdc #did +5      - add 5 to #did
            pdc #you /0.5    - divide #you by -0.5 (equivalent to *2)
            pdc #know ^-3.5  - raise #know to the power -3.5
            pdc #shinigami 0 - exists or not, set #shinigami to 0
            pdc #love //3    - divide #love by 3 (integer division)
            pdc #apples %17  - set #apples to (#apples mod 17)


Thank you for using polydown!

Source code: https://github.com/Randoragon/polydown

Â© 2020 Randoragon. Distributed under the MIT License''')
    else:
        send(convert(sys.argv[1:]))
