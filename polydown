#!/usr/bin/env python3

import socket
import subprocess
import os
import sys
import threading
from time import sleep

HOME_DIR  = os.path.expanduser('~')
CONF_DIR  = HOME_DIR + '/.config/polydown'
CONF_FILE = CONF_DIR + '/polydown.conf'
TEMP_DIR  = '/tmp/polydown/'
PORT      = 5000

def process_client(socket):
    # Listen for client commands
    socket.listen(1)
    conn, address = socket.accept()
    try:
        print("CONNECTION FROM: {}".format(address))
        cmd = conn.recv(1024).decode()
        if not cmd:
            raise ValueError('Received None')
        print("Received: {}".format(cmd))
        cmd = cmd.split()
        print('cmd={}'.format(cmd))

        # Identify and execute a command
        if cmd[0] in ('list', 'ls'):
            if len(procs) != 0:
                for i in range(len(procs)):
                    conn.send('{}  {}\n'.format(procs[i][0].pid, procs[i][1]).encode())
            return 0
        elif cmd[0] in ('cat', 'get', 'show', 'print'):
            if int(cmd[1]) < len(procs):
                conn.send('{}  {}'.format(procs[cmd[1]][0].pid, procs[cmd[1]][1]).encode())
            else:
                conn.send('Timer {} was not found. Use "ls" to view a full list of active timers.'.format(cmd[1]).encode())
            return 0
        elif cmd[0] == 'kill':
            return 1
        proc_index = len(procs)
        proc = subprocess.Popen(cmd, shell=False, stderr=subprocess.PIPE, stdout=subprocess.PIPE)

        # Add to the process list
        procs.append((proc, ' '.join(cmd)))
        conn.send('Successfully added timer {} with PID {}'.format(proc_index, proc.pid).encode())
    except Exception as exception:
        print(f'process_client caught exception:\n{type(exception).__name__}')
    finally:
        conn.close()
        print('DISCONNECTED')

def local_routine():
    t = threading.currentThread()
    while getattr(t, "do_run", True):
        # Remove dead processes from the list
        i = 0
        while i < len(procs):
            if procs[i][0].poll() is not None:
                print('Deleting dead process {} {}'.format(i, procs[i][0].pid))
                del procs[i]
                i -= 1
            i += 1
        sleep(1)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        # Ensure config path and file exist
        os.makedirs(CONF_DIR, exist_ok=True)
        open(CONF_FILE, 'a').close()

        # Load timers from config file
        timers = list(map(lambda x: x.strip(), open(CONF_FILE, 'r').readlines()))
        procs = []

        # Set up socket
        host = socket.gethostname()
        server_socket = socket.socket()
        server_socket.bind((host, PORT))
        
        # Run local routine in parallel
        t = threading.Thread(target=local_routine)
        t.start()

        while True:
            if process_client(server_socket):
                server_socket.close()
                break
        t.do_run = False
        print('Polydown server was killed')
    elif sys.argv[1] in ('-k', '--kill'):
        # Kill the server
        host = socket.gethostname()
        client_socket = socket.socket()
        client_socket.connect((host, PORT))
        client_socket.send('kill'.encode())
        data = client_socket.recv(1024).decode()
        if data == '1':
            print('Polydown server killed.')
        else:
            print('Failed to kill the Polydown server.')
    else:
        print('Unknown parameter. Only -k and --kill are available for killing the server.')
